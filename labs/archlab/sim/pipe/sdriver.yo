                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6f801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | # Loop header
                            | 	# xorq %rax,%rax		# count = 0;
0x032: 704501000000000000   | 	jmp test1			
                            | 
0x03b:                      | Xloop:
0x03b: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x045: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x04f: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x059: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# ...and store it to dst
0x063: 6288                 | 	andq %r8, %r8		# val <= 0?
0x065: 717800000000000000   | 	jle loop2			# if so, goto next loop
0x06e: c0f00100000000000000 | 	iaddq $1,%rax 		# count++
0x078:                      | loop2:
                            | 	# mrmovq 8(%rdi), %r8	# read val from src...
                            | 	# rmmovq %r8, 8(%rsi)	# ...and store it to dst
0x078: 6299                 | 	andq %r9, %r9		# val <= 0?
0x07a: 718d00000000000000   | 	jle loop3			# if so, goto next loop
0x083: c0f00100000000000000 | 	iaddq $1,%rax 		# count++
0x08d:                      | loop3:
0x08d: 50871000000000000000 | 	mrmovq 16(%rdi), %r8	# read val from src...
0x097: 50971800000000000000 | 	mrmovq 24(%rdi), %r9	# read val from src...
0x0a1: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)	# ...and store it to dst
0x0ab: 40961800000000000000 | 	rmmovq %r9, 24(%rsi)	# ...and store it to dst
0x0b5: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0b7: 71ca00000000000000   | 	jle loop4			# if so, goto next loop
0x0c0: c0f00100000000000000 | 	iaddq $1,%rax 		# count++
0x0ca:                      | loop4:
                            | 	# mrmovq 24(%rdi), %r8	# read val from src...
                            | 	# rmmovq %r8, 24(%rsi)	# ...and store it to dst
0x0ca: 6299                 | 	andq %r9, %r9		# val <= 0?
0x0cc: 71df00000000000000   | 	jle loop5			# if so, goto next loop
0x0d5: c0f00100000000000000 | 	iaddq $1,%rax 		# count++
0x0df:                      | loop5:
0x0df: 50872000000000000000 | 	mrmovq 32(%rdi), %r8	# read val from src...
0x0e9: 50972800000000000000 | 	mrmovq 40(%rdi), %r9	# read val from src...
0x0f3: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)	# ...and store it to dst
0x0fd: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)	# ...and store it to dst
0x107: 6288                 | 	andq %r8, %r8		# val <= 0?
0x109: 711c01000000000000   | 	jle loop6			# if so, goto next loop
0x112: c0f00100000000000000 | 	iaddq $1,%rax 		# count++
0x11c:                      | loop6:
                            | 	# mrmovq 40(%rdi), %r8	# read val from src...
                            | 	# rmmovq %r8, 40(%rsi)	# ...and store it to dst
0x11c: c0f73000000000000000 | 	iaddq $48,%rdi		# src+=6
0x126: c0f63000000000000000 | 	iaddq $48,%rsi		# dst+=6
0x130: 6299                 | 	andq %r9, %r9		# val <= 0?
0x132: 714501000000000000   | 	jle test1			# if so, goto test1
0x13b: c0f00100000000000000 | 	iaddq $1,%rax 		# count++
0x145:                      | test1:
0x145: c0f2faffffffffffffff | 	iaddq $-6,%rdx		# len-=6
0x14f: 753b00000000000000   | 	jge Xloop			# len>=0?
0x158: c0f20600000000000000 | 	iaddq $6,%rdx		# len+=6
0x162: 70a801000000000000   | 	jmp test2
0x16b:                      | Loop:
0x16b: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x175: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x17f: c0f70800000000000000 | 	iaddq $8,%rdi		# src++
0x189: c0f60800000000000000 | 	iaddq $8,%rsi		# dst++
0x193: 6288                 | 	andq %r8, %r8		# val <= 0?
0x195: 71a801000000000000   | 	jle test2			# if so, goto test2:
0x19e: c0f00100000000000000 | 	iaddq $1,%rax 		# count++
0x1a8:                      | test2:
0x1a8: c0f2ffffffffffffffff | 	iaddq $-1,%rdx # len--
0x1b2: 756b01000000000000   | 	jge Loop	  # len>=0?
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1bb:                      | Done:
0x1bb: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1bc:                      | End:
                            | #/* $end ncopy-ys */
0x1bc:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1c0:                      | 	.align 8
0x1c0:                      | src:
0x1c0: ffffffffffffffff     | 	.quad -1
0x1c8: feffffffffffffff     | 	.quad -2
0x1d0: 0300000000000000     | 	.quad 3
0x1d8: 0400000000000000     | 	.quad 4
0x1e0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1f0:                      | 	.align 16
0x1f0:                      | Predest:
0x1f0: fadebc0000000000     | 	.quad 0xbcdefa
0x1f8:                      | dest:
0x1f8: abefcd0000000000     | 	.quad 0xcdefab
0x200: abefcd0000000000     | 	.quad 0xcdefab
0x208: abefcd0000000000     | 	.quad 0xcdefab
0x210: abefcd0000000000     | 	.quad 0xcdefab
0x218:                      | Postdest:
0x218: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x220:                      | .align 8
                            | # Run time stack
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
                            | 
0x2a0:                      | Stack:
