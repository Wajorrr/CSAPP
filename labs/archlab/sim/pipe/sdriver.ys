#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion

# Loop header
	# xorq %rax,%rax		# count = 0;
	jmp test1			

Xloop:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle loop2			# if so, goto next loop
	iaddq $1,%rax 		# count++
loop2:
	# mrmovq 8(%rdi), %r8	# read val from src...
	# rmmovq %r8, 8(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle loop3			# if so, goto next loop
	iaddq $1,%rax 		# count++
loop3:
	mrmovq 16(%rdi), %r8	# read val from src...
	mrmovq 24(%rdi), %r9	# read val from src...
	rmmovq %r8, 16(%rsi)	# ...and store it to dst
	rmmovq %r9, 24(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle loop4			# if so, goto next loop
	iaddq $1,%rax 		# count++
loop4:
	# mrmovq 24(%rdi), %r8	# read val from src...
	# rmmovq %r8, 24(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle loop5			# if so, goto next loop
	iaddq $1,%rax 		# count++
loop5:
	mrmovq 32(%rdi), %r8	# read val from src...
	mrmovq 40(%rdi), %r9	# read val from src...
	rmmovq %r8, 32(%rsi)	# ...and store it to dst
	rmmovq %r9, 40(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle loop6			# if so, goto next loop
	iaddq $1,%rax 		# count++
loop6:
	# mrmovq 40(%rdi), %r8	# read val from src...
	# rmmovq %r8, 40(%rsi)	# ...and store it to dst
	iaddq $48,%rdi		# src+=6
	iaddq $48,%rsi		# dst+=6
	andq %r9, %r9		# val <= 0?
	jle test1			# if so, goto test1
	iaddq $1,%rax 		# count++
test1:
	iaddq $-6,%rdx		# len-=6
	jge Xloop			# len>=0?
	iaddq $6,%rdx		# len+=6
	jmp test2
Loop:
	mrmovq (%rdi), %r8	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	iaddq $8,%rdi		# src++
	iaddq $8,%rsi		# dst++
	andq %r8, %r8		# val <= 0?
	jle test2			# if so, goto test2:
	iaddq $1,%rax 		# count++
test2:
	iaddq $-1,%rdx # len--
	jge Loop	  # len>=0?
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
